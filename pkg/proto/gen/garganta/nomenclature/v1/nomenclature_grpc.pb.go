// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: garganta/nomenclature/v1/nomenclature.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GargantaNomenclatureAPI_GetNomenclature_FullMethodName = "/garganta.nomenclature.v1.GargantaNomenclatureAPI/GetNomenclature"
)

// GargantaNomenclatureAPIClient is the client API for GargantaNomenclatureAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GargantaNomenclatureAPIClient interface {
	GetNomenclature(ctx context.Context, in *GetNomenclatureRequest, opts ...grpc.CallOption) (*GetNomenclatureResponse, error)
}

type gargantaNomenclatureAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewGargantaNomenclatureAPIClient(cc grpc.ClientConnInterface) GargantaNomenclatureAPIClient {
	return &gargantaNomenclatureAPIClient{cc}
}

func (c *gargantaNomenclatureAPIClient) GetNomenclature(ctx context.Context, in *GetNomenclatureRequest, opts ...grpc.CallOption) (*GetNomenclatureResponse, error) {
	out := new(GetNomenclatureResponse)
	err := c.cc.Invoke(ctx, GargantaNomenclatureAPI_GetNomenclature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GargantaNomenclatureAPIServer is the server API for GargantaNomenclatureAPI service.
// All implementations must embed UnimplementedGargantaNomenclatureAPIServer
// for forward compatibility
type GargantaNomenclatureAPIServer interface {
	GetNomenclature(context.Context, *GetNomenclatureRequest) (*GetNomenclatureResponse, error)
	mustEmbedUnimplementedGargantaNomenclatureAPIServer()
}

// UnimplementedGargantaNomenclatureAPIServer must be embedded to have forward compatible implementations.
type UnimplementedGargantaNomenclatureAPIServer struct {
}

func (UnimplementedGargantaNomenclatureAPIServer) GetNomenclature(context.Context, *GetNomenclatureRequest) (*GetNomenclatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNomenclature not implemented")
}
func (UnimplementedGargantaNomenclatureAPIServer) mustEmbedUnimplementedGargantaNomenclatureAPIServer() {
}

// UnsafeGargantaNomenclatureAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GargantaNomenclatureAPIServer will
// result in compilation errors.
type UnsafeGargantaNomenclatureAPIServer interface {
	mustEmbedUnimplementedGargantaNomenclatureAPIServer()
}

func RegisterGargantaNomenclatureAPIServer(s grpc.ServiceRegistrar, srv GargantaNomenclatureAPIServer) {
	s.RegisterService(&GargantaNomenclatureAPI_ServiceDesc, srv)
}

func _GargantaNomenclatureAPI_GetNomenclature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNomenclatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GargantaNomenclatureAPIServer).GetNomenclature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GargantaNomenclatureAPI_GetNomenclature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GargantaNomenclatureAPIServer).GetNomenclature(ctx, req.(*GetNomenclatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GargantaNomenclatureAPI_ServiceDesc is the grpc.ServiceDesc for GargantaNomenclatureAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GargantaNomenclatureAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "garganta.nomenclature.v1.GargantaNomenclatureAPI",
	HandlerType: (*GargantaNomenclatureAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNomenclature",
			Handler:    _GargantaNomenclatureAPI_GetNomenclature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "garganta/nomenclature/v1/nomenclature.proto",
}
