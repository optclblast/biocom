// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: warden/sso/v1/sso.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WardenSSOAPI_SignIn_FullMethodName = "/wrdn.sso.v1.WardenSSOAPI/SignIn"
	WardenSSOAPI_SignUp_FullMethodName = "/wrdn.sso.v1.WardenSSOAPI/SignUp"
)

// WardenSSOAPIClient is the client API for WardenSSOAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WardenSSOAPIClient interface {
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
}

type wardenSSOAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewWardenSSOAPIClient(cc grpc.ClientConnInterface) WardenSSOAPIClient {
	return &wardenSSOAPIClient{cc}
}

func (c *wardenSSOAPIClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, WardenSSOAPI_SignIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardenSSOAPIClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, WardenSSOAPI_SignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WardenSSOAPIServer is the server API for WardenSSOAPI service.
// All implementations must embed UnimplementedWardenSSOAPIServer
// for forward compatibility
type WardenSSOAPIServer interface {
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	mustEmbedUnimplementedWardenSSOAPIServer()
}

// UnimplementedWardenSSOAPIServer must be embedded to have forward compatible implementations.
type UnimplementedWardenSSOAPIServer struct {
}

func (UnimplementedWardenSSOAPIServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedWardenSSOAPIServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedWardenSSOAPIServer) mustEmbedUnimplementedWardenSSOAPIServer() {}

// UnsafeWardenSSOAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WardenSSOAPIServer will
// result in compilation errors.
type UnsafeWardenSSOAPIServer interface {
	mustEmbedUnimplementedWardenSSOAPIServer()
}

func RegisterWardenSSOAPIServer(s grpc.ServiceRegistrar, srv WardenSSOAPIServer) {
	s.RegisterService(&WardenSSOAPI_ServiceDesc, srv)
}

func _WardenSSOAPI_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardenSSOAPIServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardenSSOAPI_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardenSSOAPIServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardenSSOAPI_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardenSSOAPIServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardenSSOAPI_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardenSSOAPIServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WardenSSOAPI_ServiceDesc is the grpc.ServiceDesc for WardenSSOAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WardenSSOAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wrdn.sso.v1.WardenSSOAPI",
	HandlerType: (*WardenSSOAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _WardenSSOAPI_SignIn_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _WardenSSOAPI_SignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warden/sso/v1/sso.proto",
}
